{"version":3,"sources":["assets/default.md","components/EditPane.js","components/PreviewPane.js","components/TabbedView.js","components/SplitView.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","useStyles","makeStyles","theme","root","height","width","padding","paddingTop","overflow","outline","resize","border","EditPane","_ref","children","handleTextChange","classes","react_default","a","createElement","Typography","component","className","id","onChange","e","target","value","wordBreak","& a","color","palette","secondary","light","& a:visited","dark","& blockquote","background","grey","primary","main","borderLeft","paddingLeft","margin","& pre","overflowX","& pre, code","fontWeight","& table","borderCollapse","& th, td","PreviewPane","dangerouslySetInnerHTML","__html","backgroundColor","paper","TabbedView","editText","previewText","_React$useState","React","useState","_React$useState2","Object","slicedToArray","setValue","AppBar","position","Tabs","event","newValue","indicatorColor","textColor","variant","Tab","label","lib_default","index","onChangeIndex","components_PreviewPane","components_EditPane","display","& #preview","overflowY","SplitView","disabled","marked","setOptions","breaks","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isMobile","bind","assertThisInitialized","handleScreenSize","text","setState","window","innerWidth","_this2","addEventListener","fetch","defaultMarkdown","then","response","removeEventListener","Fragment","CssBaseline","components_TabbedView","components_SplitView","Component","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3e9c3ab6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/default.88a1db3d.md\";","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    height: \"100%\",\n    width: \"100%\",\n    padding: \"0.5rem\",\n    paddingTop: \"4rem\",\n    overflow: \"auto\",\n    // Remove text area default styles\n    outline: \"none\",\n    resize: \"none\",\n    border: \"none\"\n  }\n}));\n\nfunction EditPane({ children, handleTextChange }) {\n  const classes = useStyles();\n\n  function handleChange(e) {\n    handleTextChange(e.target.value);\n  }\n\n  return (\n    <Typography\n      component=\"textarea\"\n      className={classes.root}\n      id=\"editor\"\n      onChange={handleChange}\n      value={children || \"\"}\n    />\n  );\n}\n\nEditPane.propTypes = {\n  children: PropTypes.node.isRequired,\n  handleTextChange: PropTypes.func.isRequired\n};\n\nexport default EditPane;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    height: \"100%\",\n    width: \"100%\",\n    padding: \"0.5rem\",\n    paddingTop: \"4rem\",\n    wordBreak: \"break-word\",\n    overflow: \"auto\",\n\n    // Style Markdown rendered as HTML in preview pane\n    \"& a\": { color: theme.palette.secondary.light },\n    \"& a:visited\": { color: theme.palette.secondary.dark },\n    \"& blockquote\": {\n      background: theme.palette.grey[100],\n      color: theme.palette.primary.main,\n      borderLeft: \"0.25rem solid\",\n      paddingLeft: \"0.5rem\",\n      margin: \"1rem\"\n    },\n    \"& pre\": {\n      overflowX: \"auto\"\n    },\n    \"& pre, code\": {\n      background: theme.palette.grey[200],\n      fontWeight: \"bold\"\n    },\n    \"& table\": {\n      borderCollapse: \"collapse\"\n    },\n    \"& th, td\": {\n      padding: \"0.5rem\",\n      border: \"1px solid black\"\n    }\n  }\n}));\n\nfunction PreviewPane({ children }) {\n  const classes = useStyles();\n  return (\n    <Typography\n      component=\"div\"\n      className={classes.root}\n      dangerouslySetInnerHTML={{ __html: children }}\n      id=\"preview\"\n    />\n  );\n}\n\nPreviewPane.propTypes = {\n  children: PropTypes.node.isRequired\n};\n\nexport default PreviewPane;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport SwipeableViews from \"react-swipeable-views\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\n\nimport EditPane from \"./EditPane\";\nimport PreviewPane from \"./PreviewPane\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    backgroundColor: theme.palette.background.paper,\n    height: \"100vh\",\n    width: \"100vw\"\n  }\n}));\n\nfunction TabbedView({ editText, previewText, handleTextChange }) {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(0);\n\n  function handleChange(event, newValue) {\n    setValue(newValue);\n  }\n\n  function handleChangeIndex(index) {\n    setValue(index);\n  }\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"fixed\" color=\"default\">\n        <Tabs\n          value={value}\n          onChange={handleChange}\n          indicatorColor=\"primary\"\n          textColor=\"primary\"\n          variant=\"fullWidth\"\n        >\n          <Tab label=\"Preview\" />\n          <Tab label=\"Edit\" />\n        </Tabs>\n      </AppBar>\n      <SwipeableViews index={value} onChangeIndex={handleChangeIndex}>\n        <PreviewPane>{previewText}</PreviewPane>\n        <EditPane handleTextChange={handleTextChange}>{editText}</EditPane>\n      </SwipeableViews>\n    </div>\n  );\n}\n\nTabbedView.propTypes = {\n  previewText: PropTypes.string.isRequired,\n  editText: PropTypes.string.isRequired,\n  handleTextChange: PropTypes.func.isRequired\n};\n\nexport default TabbedView;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\n\nimport EditPane from \"./EditPane\";\nimport PreviewPane from \"./PreviewPane\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    backgroundColor: theme.palette.background.paper,\n    height: \"100vh\",\n    width: \"100vw\",\n    display: \"flex\",\n    \"& #preview\": {\n      overflowY: \"scroll\"\n    }\n  }\n}));\n\nfunction SplitView({ editText, previewText, handleTextChange }) {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"fixed\" color=\"default\">\n        <Tabs textColor=\"primary\" variant=\"fullWidth\">\n          <Tab disabled={true} label=\"Preview\" />\n          <Tab disabled={true} label=\"Edit\" />\n        </Tabs>\n      </AppBar>\n      <PreviewPane>{previewText}</PreviewPane>\n      <EditPane handleTextChange={handleTextChange}>{editText}</EditPane>\n    </div>\n  );\n}\n\nSplitView.propTypes = {\n  previewText: PropTypes.string.isRequired,\n  editText: PropTypes.string.isRequired,\n  handleTextChange: PropTypes.func.isRequired\n};\n\nexport default SplitView;\n","import marked from \"marked\";\nimport React, { Component } from \"react\";\nimport TabbedView from \"./components/TabbedView\";\nimport SplitView from \"./components/SplitView\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\n\nimport defaultMarkdown from \"./assets/default.md\";\n\nmarked.setOptions({\n  breaks: true //add <br> on a single line break\n});\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      editText: \"\",\n      previewText: \"\",\n      isMobile: true\n    };\n    this.handleTextChange = this.handleTextChange.bind(this);\n    this.handleScreenSize = this.handleScreenSize.bind(this);\n  }\n\n  handleTextChange(text) {\n    this.setState({\n      editText: text,\n      previewText: marked(text)\n    });\n  }\n\n  handleScreenSize() {\n    this.setState({ isMobile: window.innerWidth < 768 });\n  }\n\n  componentDidMount() {\n    this.handleScreenSize();\n    window.addEventListener(\"resize\", this.handleScreenSize);\n    fetch(defaultMarkdown)\n      .then(response => response.text())\n      .then(text => {\n        this.handleTextChange(text);\n      });\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.handleScreenSize);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <React.Fragment>\n          <CssBaseline />\n          {this.state.isMobile ? (\n            <TabbedView\n              editText={this.state.editText}\n              previewText={this.state.previewText}\n              handleTextChange={this.handleTextChange}\n            />\n          ) : (\n            <SplitView\n              editText={this.state.editText}\n              previewText={this.state.previewText}\n              handleTextChange={this.handleTextChange}\n            />\n          )}\n        </React.Fragment>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}