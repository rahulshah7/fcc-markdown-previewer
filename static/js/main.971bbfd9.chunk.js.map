{"version":3,"sources":["assets/default.md","components/EditPane.js","components/PreviewPane.js","components/TabbedView.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","EditPane","_ref","children","handleTextChange","react_default","a","createElement","Typography","value","component","id","onChange","e","target","PreviewPane","dangerouslySetInnerHTML","__html","useStyles","makeStyles","theme","root","backgroundColor","palette","background","paper","width","TabbedView","editText","previewText","classes","_React$useState","React","useState","_React$useState2","Object","slicedToArray","setValue","className","AppBar","position","color","Tabs","event","newValue","indicatorColor","textColor","variant","Tab","label","lib_default","index","onChangeIndex","components_EditPane","components_PreviewPane","marked","setOptions","breaks","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","bind","assertThisInitialized","text","setState","_this2","fetch","defaultMarkdown","then","response","Fragment","CssBaseline","components_TabbedView","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.971bbfd9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/default.88a1db3d.md\";","import React from \"react\";\n// import PropTypes from 'prop-types';\nimport Typography from \"@material-ui/core/Typography\";\n\nfunction EditPane({ children, handleTextChange }) {\n  function handleChange(e) {\n    handleTextChange(e.target.value);\n  }\n\n  return (\n    <Typography\n      value={children || \"\"}\n      component=\"textarea\"\n      id=\"editor\"\n      onChange={handleChange}\n    />\n  );\n}\n\n// EditPane.propTypes = {\n//   children: PropTypes.node.isRequired,\n// };\n\nexport default EditPane;\n","import React from \"react\";\n// import PropTypes from 'prop-types';\nimport Typography from \"@material-ui/core/Typography\";\n\nfunction PreviewPane({ children }) {\n  return (\n    <Typography\n      component=\"div\"\n      id=\"preview\"\n      dangerouslySetInnerHTML={{ __html: children }}\n    />\n  );\n}\n\n// PreviewPane.propTypes = {\n//   children: PropTypes.node.isRequired,\n// };\n\nexport default PreviewPane;\n","import React from \"react\";\nimport SwipeableViews from \"react-swipeable-views\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\n\nimport EditPane from \"./EditPane\";\nimport PreviewPane from \"./PreviewPane\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    backgroundColor: theme.palette.background.paper,\n    width: 500\n  }\n}));\n\nfunction TabbedView({ editText, previewText, handleTextChange }) {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(0);\n\n  function handleChange(event, newValue) {\n    setValue(newValue);\n  }\n\n  function handleChangeIndex(index) {\n    setValue(index);\n  }\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\" color=\"default\">\n        <Tabs\n          value={value}\n          onChange={handleChange}\n          indicatorColor=\"primary\"\n          textColor=\"primary\"\n          variant=\"fullWidth\"\n        >\n          <Tab label=\"Edit\" />\n          <Tab label=\"Preview\" />\n        </Tabs>\n      </AppBar>\n      <SwipeableViews index={value} onChangeIndex={handleChangeIndex}>\n        <EditPane handleTextChange={handleTextChange}>{editText}</EditPane>\n        <PreviewPane>{previewText}</PreviewPane>\n      </SwipeableViews>\n    </div>\n  );\n}\n\nexport default TabbedView;\n","import marked from \"marked\";\nimport React, { Component } from \"react\";\nimport TabbedView from \"./components/TabbedView\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\n\nimport defaultMarkdown from \"./assets/default.md\";\n\nmarked.setOptions({\n  breaks: true //add <br> on a single line break\n});\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      editText: \"\",\n      previewText: \"\"\n    };\n    this.handleTextChange = this.handleTextChange.bind(this);\n  }\n\n  handleTextChange(text) {\n    this.setState({\n      editText: text,\n      previewText: marked(text)\n    });\n  }\n\n  componentDidMount() {\n    fetch(defaultMarkdown)\n      .then(response => response.text())\n      .then(text => {\n        this.handleTextChange(text);\n      });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <React.Fragment>\n          <CssBaseline />\n          <TabbedView\n            editText={this.state.editText}\n            previewText={this.state.previewText}\n            handleTextChange={this.handleTextChange}\n          />\n        </React.Fragment>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}